/*Описать класс для хранения данных (контейнер). Данные должны храниться,
например, в виде массива. Класс должен включать в себя функции добавления данных,
        удаления данных, вывода данных на консоль ( info() ). Реализовать итератор для перебора
данных контейнера так, чтобы он перебирал элементы в порядке их добавления, игнорируя
элементы, нарушающие порядок по убыванию. То есть если следующие элемент больше
предыдущего, то итератор возвращает не его, а пытается найти следующий не больший по
        значению элемент. Итератор должен быть кольцевым. Итератор должен
быть двунаправленным. Продемонстрировать работу шаблона на объектах как
встроенного типа, так и собственного класса. Для этого создать собственный класс и
перегрузить в нём нужные функции-операции.*/

#include <iostream>
#include "myclass.h"
#include "class.h"

using namespace std;

int main()
{
    Store s1;
    s1.add(4);
    s1.add(3);
    s1.add(2);

    s1.info();

    int a = 1000;
    // Делаем цикл с использованием итератора контейнера s1
    for (Store::iterator it = s1.begin(); it != s1.end(); ++it)
    {
        if (a < *it)
        {
            continue;
        }
        else
        {
            a = *it;
            cout << *it << " ";
        }
    }
    cout << endl;

    a = 1000;
    for (Store::iterator it = s1.end(); it != s1.begin(); --it)
    {
        if (a < *it)
        {
            continue;
        }
        else
        {
            a = *it;
            cout << *it << " ";
        }
    }
    cout << endl;

    return 0;
}
